with Ada.Streams.Stream_IO; use Ada.Streams.Stream_IO;
with Ada.Text_IO; use Ada.Text_IO;
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;

with Flux_Binaire; use Flux_Binaire;
with Arbre; 


procedure Compresser is

    --Variables :
    subtype Intervalle_Ascii is T_Octet range T_Octet'First .. T_Octet'Last;
    Tableau_Frequences : array (Intervalle_Ascii) of Integer;

    Nom_Fichier : constant String := "exemple.txt";
    Fichier : Ada.Streams.Stream_IO.File_Type;
	Flux_Fichier : Stream_Access;

    Octet : T_Octet;
    
    package Arbre_Integer_Unbounded_String is
            new Arbre (T_Cle => Integer, T_Valeur => T_Octet);
    use Arbre_Integer_Unbounded_String;

    type T_Liste is array (1..256) of T_Arbre;
    
    type T_Tableau is record
        Taille : Integer;
        Tableau : T_Liste;
    end record;
    
    Liste_Char : T_Tableau;

    type T_Codage is array (Intervalle_Ascii) of T_Flux_Binaire;

    Code_Vide : T_Flux_Binaire;
    Codage : T_Codage;
    
    --Fonctions et procédures :
    procedure Initialiser_Frequences is
        
    begin
        for I in Intervalle_Ascii loop
            Tableau_Frequences (I) := 0;
        end loop;
    end Initialiser_Frequences;

    
    function Le_Caractere (Octet : in T_Octet) return String is
        Caractere : Unbounded_String;
    begin
        case Octet is
            when 10 => Caractere := To_Unbounded_String ("'\n'");
            when 255 => Caractere := To_Unbounded_String ("'\$'");
            when others => Caractere := To_Unbounded_String (Character'Val(Octet)'Image);
        end case;

        return To_String (Caractere);
    end Le_Caractere;


    procedure Afficher_Frequences is
    begin
        for I in Intervalle_Ascii loop
            if Tableau_Frequences (I) /= 0 then
                Put_Line (Le_Caractere (I) & ": " & Tableau_Frequences(I)'Image);
            end if;
        end loop;
    end Afficher_Frequences;
    
    
    procedure Initialiser_noeud(Indice : in Integer; Frequence : in Integer; Caractere: in T_Octet; Noeud_Gauche : in T_Arbre; Noeud_Droite : in T_Arbre; Liste : in out T_Tableau) is
    begin 
        Initialiser(Liste.Tableau(Indice));
        Enregistrer(Liste.Tableau(Indice),Frequence,Caractere,Noeud_Gauche,Noeud_Droite);
    end Initialiser_noeud;
    
                                
    procedure Creer_liste_noeud is
    
    begin
        for I in Intervalle_Ascii loop
            if Tableau_Frequences(I)/=0 then
                Liste_Char.Taille:=Liste_Char.Taille+1;
                Initialiser_noeud(Liste_Char.Taille,Tableau_Frequences(I),I,null,null,Liste_Char);
            end if;
        end loop;
        Liste_Char.Taille:=Liste_Char.Taille+1;
        Initialiser_noeud(Liste_Char.Taille,0,T_Octet'Last,null,null,Liste_Char); --Marchera ptt pas le 255
    end Creer_liste_noeud;          
    
    
    --Programme de tri par sélection du tp5 modifier
    procedure Trier (Tab : in out T_Tableau) is
	    Memoire : T_Arbre;
	    Indice_Min : Integer;
	begin
	    for Indice1 in 1..Tab.Taille-1 loop
	        
	        --Determiner le minimum--
	        Indice_Min := Indice1;
	        for Indice2 in Indice1+1..Tab.Taille loop
	            if Tab.Tableau(Indice2).Cle>Tab.Tableau(Indice_Min).Cle then
	                Indice_Min := Indice2;
	            end if;
	        end loop;
	        
            --Deplacer le minimum--
	        Memoire:=Tab.Tableau(Indice1);
	        Tab.Tableau(Indice1):=Tab.Tableau(Indice_Min);
	        Tab.Tableau(Indice_Min):=Memoire;
	        
	   end loop;
    end Trier;
    
    procedure Creer_Nouveau_Noeud(Liste : in out T_Tableau) is
        Noeud_plus_faible_1 : T_Arbre;
        Noeud_plus_faible_2 : T_Arbre;
        Nouveau_noeud : T_Arbre;
    begin
        Noeud_plus_faible_1 := Liste.Tableau(Liste.Taille);
        Noeud_plus_faible_2 := Liste.Tableau(Liste.Taille-1);
        Initialiser(Nouveau_noeud);
        Enregistrer(Nouveau_Noeud,Noeud_plus_faible_1.Cle+Noeud_plus_faible_2.Cle,0,Noeud_plus_faible_1,Noeud_plus_faible_2);
        Liste.Taille:=Liste.Taille-1;
        Liste.Tableau(Liste.Taille):=Nouveau_noeud;
    end Creer_Nouveau_Noeud;   

    procedure Avoir_Code_Arbre(Arbre : in T_Arbre; Codage : out T_Codage; Code : in T_Flux_Binaire) is
        Code_Gauche : T_Flux_Binaire;
        Code_Droite : T_Flux_Binaire;
    begin
        if Arbre.Gauche = null then
            Ajouter_Flux (Codage(Arbre.Valeur), Code);
        else
            ---Création de nouvelle variable pour essayer
            Initialiser (Code_Gauche);
            Ajouter_Flux (Code_Gauche, Code);
            Ajouter_Bit(Code_Gauche, 0);

            Initialiser (Code_Droite);
            Ajouter_Flux (Code_Droite, Code);
            Ajouter_Bit(Code_Droite, 1);

            Avoir_Code_Arbre(Arbre.Gauche, Codage, Code_Gauche);
            Avoir_Code_Arbre(Arbre.Droite, Codage, Code_Droite);
        end if;
    end Avoir_Code_Arbre;
    
    
--Programme :    
begin
    -- Déterminer les fréquences des caractères du texte
    Initialiser_Frequences;

    Open (Fichier, In_File, Nom_Fichier);
    Flux_Fichier := Stream (Fichier);

	while not End_Of_File (Fichier) loop
        Octet := T_Octet'Input (Flux_Fichier);
        Tableau_Frequences (Octet) := Tableau_Frequences (Octet) + 1;
    end loop;

    Close (Fichier);

    Put_Line ("Frequences des caracteres:");
    Afficher_Frequences;

    -- Créer arbre
    Creer_liste_noeud;
    Trier (Liste_Char);
    while Liste_Char.Taille > 1 loop
        Creer_Nouveau_Noeud (liste_Char);
        Trier (Liste_Char);
    end loop;

    -- Déterminer les codes des caractères
    Initialiser (Code_vide);
    for I in Intervalle_Ascii loop
        Initialiser (Codage (I));
    end loop;

    Avoir_Code_Arbre (Liste_Char.Tableau(1), Codage, Code_vide);

    New_Line;
    Put_Line ("Codes des caracteres:");
    for I in Intervalle_Ascii loop
        if not Est_Vide (Codage (I)) then
            Put_Line (Le_Caractere (I) & ": " & Une_Chaine (Codage (I)));
        end if;
    end loop;

    -- Encoder l’arbre de Huffman
    -- Encoder le fichier grâce à l’arbre
end Compresser;
