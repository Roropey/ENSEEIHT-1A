% Validation de http://hpxc/cregut.svn.enseeiht.fr/2021/1sn/pim/tps/rpeyremo/tp10
% Run on 2021-12-06 08:18:34.226302


################################################################################
# Modification des fichiers fournis
################################################################################


================================================================================
## Fichiers qui NE devaient PAS être modifiés
================================================================================

* Fichier alea.adb non modifié... ok
* Fichier alea.ads non modifié... ok
* Fichier exemple_alea.adb non modifié... ok
* Fichier exemple_unbounded_string.adb non modifié... ok
* Fichier sda_exceptions.ads non modifié... ok
* Fichier test_lca.adb non modifié... ok

================================================================================
## Fichiers qui DEVAIENT être modifiés
================================================================================

* Fichier lca_sujet.adb modifié... ok
* Fichier lca.ads modifié... ok
* Fichier lca.adb modifié... ok
* Fichier evaluer_alea_lca.adb modifié... ok
* Fichier th_sujet.adb modifié... ok
* Fichier test_th.adb modifié... ok
* Fichier th.ads modifié... ok
* Fichier th.adb modifié... ok
* Fichier evaluer_alea_th.adb modifié... ok


################################################################################
# Nettoyer
################################################################################

* Running gnatclean... ok


################################################################################
# Exercice 1
################################################################################


================================================================================
## Modifications de lca.ads
================================================================================

* Comparaison de lca.ads et fournis/lca.ads... différents

   | -- AVEC_AFFICHER_DEBUG START DELETE                                                                <
   |         -- Afficher la Sda en révélant sa structure interne.                                       <
   |         --generic                                                                                  <
   |                 --with procedure Afficher_Cle (Cle : in T_Cle);                                    <
   |                 --with procedure Afficher_Donnee (Donnee : in T_Donnee);                           <
   |         --procedure Afficher_Debug (Sda : in T_LCA);                                               <
   |                                                                                                    <
   |                                                                                                    <
   | -- AVEC_AFFICHER_DEBUG STOP DELETE                                                                 <
   |     type T_Cellule;                                                                                |          -- TODO : à compléter
   |                                                                                                    <
   |     type T_LCA is access T_Cellule;                                                                <
   |                                                                                                    <
   |     type T_Cellule is record                                                                       <
   |         Cle : T_Cle;                                                                               <
   |         Donnee : T_Donnee;                                                                         <
   |         Suivant : T_LCA;                                                                           <
   |     end record;                                                                                    <
   |                                                                                                    <
   |                                                                                                    <


================================================================================
## Exécution de lca_sujet.adb
================================================================================

* Compilation de lca_sujet.adb... ok
* ./lca_sujet... ok
* valgrind ./lca_sujet... ok

================================================================================
## Exécution de test_lca.adb
================================================================================

* Compilation de test_lca.adb... ok

  | test_lca.adb:257:17: warning: variable "Inutile" is assigned but never read
  | test_lca.adb:280:35: warning: formal parameter "Cle" is not referenced

* ./test_lca... ok
* valgrind ./test_lca... ok


################################################################################
# Exercice 2
################################################################################


================================================================================
## Différences entre lca.ads et th.ads
================================================================================

* Comparaison de lca.ads et th.ads... différents

   | -- Définition de structures de données associatives sous forme d'une liste                         |  -- Définition de structures de données associatives sous forme d'un tableau
   | -- chaînée associative (LCA).                                                                      |  -- de hachage.
   |                                                                                                    >  with LCA;
   |                                                                                                    |      with package P_LCA is new LCA (T_Cle => T_Cle, T_Donnee => T_Donnee);
   | package LCA is                                                                                     |      Taille_Max : Integer;
   |                                                                                                    >      with function fonction_de_hachage(Cle : T_Cle) return Integer;
   |                                                                                                    >  package TH is
   |                                                                                                    >      use P_LCA;
   |         --procedure Afficher_Debug (Sda : in T_LCA);                                               |          --procedure Afficher_Debug (Sda : in T_LCA);
   |     type T_Cellule;                                                                                <
   |                                                                                                    <
   |     type T_LCA is access T_Cellule;                                                                <
   |                                                                                                    <
   |     type T_Cellule is record                                                                       <
   |         Cle : T_Cle;                                                                               <
   |         Donnee : T_Donnee;                                                                         <
   |         Suivant : T_LCA;                                                                           <
   |     end record;                                                                                    <
   |                                                                                                    <
   |                                                                                                    >      type T_TH is array (1..Taille_Max) of P_LCA.T_LCA;  
   | end LCA;                                                                                           |  end TH;


================================================================================
## Différences entre test_lca.ads et test_th.ads
================================================================================

* Comparaison de test_lca.adb et test_th.adb... différents

   |                                                                                                    >  with TH;
   |         package LCA_String_Integer is                                                              |      function Hachage(Cle : in Unbounded_String) return Integer is
   |                                                                                                    >          Indice : Integer;
   |                                                                                                    >          Ancien_Indice : Integer;
   |                                                                                                    >      begin
   |                                                                                                    >          Indice := 0;
   |                                                                                                    >          for lettre of To_String(Cle) loop
   |                                                                                                    >              Indice := Indice + 1;
   |                                                                                                    >          end loop;
   |                                                                                                    >          Ancien_Indice := Indice;
   |                                                                                                    >          while Indice > 11 loop
   |                                                                                                    >              Indice :=  Indice - 11;
   |                                                                                                    >          end loop;
   |                                                                                                    >          if Ancien_Indice > 11 then
   |                                                                                                    >              if Indice = 11 then
   |                                                                                                    >                  Indice := 0;
   |                                                                                                    >              else
   |                                                                                                    >                  Indice := Indice + 1;
   |                                                                                                    >              end if;
   |                                                                                                    >          end if;
   |                                                                                                    >          return Indice;
   |                                                                                                    >      end Hachage ;
   |                                                                                                    >
   |                                                                                                    >      package Liste_Chainee is
   |         use LCA_String_Integer;                                                                    |
   |                                                                                                    >      package Tableau_Hache is
   |                                                                                                    >              new TH (T_Cle => Unbounded_String , T_Donnee => Integer, fonction_de_hachage => Hachag
   |                                                                                                    >      use Tableau_Hache;
   |                 new Pour_Chaque (Afficher);                                                        |                  new Tableau_Hache.Pour_Chaque (Afficher);


================================================================================
## Exécution de th_sujet.adb
================================================================================

* Compilation de th_sujet.adb... ok

  | th.adb:2:06: warning: no entities of "SDA_Exceptions" are referenced
  | th.adb:2:30: warning: use clause for package "SDA_Exceptions" has no effect

* ./th_sujet... ok
* valgrind ./th_sujet... ok

================================================================================
## Exécution de test_th.adb
================================================================================

* Compilation de test_th.adb... ok

  | test_th.adb:283:17: warning: variable "Inutile" is assigned but never read
  | test_th.adb:306:35: warning: formal parameter "Cle" is not referenced

* ./test_th... ok
* valgrind ./test_th... ok


################################################################################
# Exercice 3
################################################################################


================================================================================
## Différences entre evaluer_alea_lca.ads et evaluer_alea_th.ads
================================================================================

* Comparaison de evaluer_alea_lca.adb et evaluer_alea_th.adb... différents

   |                                                                                                    >  with TH;
   | -- Évaluer la qualité du générateur aléatoire et les LCA.                                          |  -- Évaluer la qualité du générateur aléatoire et les TH.
   |         use Liste_Chainee;                                                                         <
   |         procedure Comparer_Liste is new Pour_Chaque (Traiter => Comparer);                         |           function Hachage(Cle : in Integer) return Integer is
   |                                                                                                    >              Indice : Integer;
   |                                                                                                    >          begin
   |                                                                                                    >              Indice := Cle;
   |                                                                                                    >              while Indice > 1000 loop
   |                                                                                                    >                  Indice := Indice - 1000;
   |                                                                                                    >              end loop;
   |                                                                                                    >              if Cle > 1000 then
   |                                                                                                    >                  if Indice = 1000 then
   |                                                                                                    >                      Indice := 1;
   |                                                                                                    >                  else
   |                                                                                                    >                      Indice := Indice + 1;
   |                                                                                                    >                  end if;
   |                                                                                                    >              end if;
   |                                                                                                    >              return Indice;
   |                                                                                                    >          end Hachage ;
   |                                                                                                    >
   |                                                                                                    >          package Tableau_Hache is
   |                                                                                                    >              new TH (T_Cle => Integer , T_Donnee => Integer, fonction_de_hachage => Hachage, Taille
   |                                                                                                    >          use Tableau_Hache;
   |                                                                                                    >
   |                                                                                                    >          procedure Comparer_Frequence is new Tableau_Hache.Pour_Chaque (Traiter => Comparer);
   |                                                                                                    >
   |         Liste : T_LCA;                                                                             |          Tableau : T_TH;  
   |         Initialiser(Liste);                                                                        |          Initialiser(Tableau);
   |             if Cle_Presente(Liste,Nombre) then                                                     |              if Cle_Presente(Tableau,Nombre) then
   |                 Enregistrer(Liste,Nombre,La_Donnee(Liste,Nombre)+1);                               |                  Enregistrer(Tableau,Nombre,La_Donnee(Tableau,Nombre)+1);
   |                 Enregistrer(Liste,Nombre,1);                                                       |                  Enregistrer(Tableau,Nombre,1);
   |         Comparer_Liste(Liste);                                                                     |          Comparer_Frequence(Tableau);


================================================================================
## Exécutions de evaluer_alea_*
================================================================================

* Running gnatclean... ok
* Compilation de evaluer_alea_lca.adb... ok

  | evaluer_alea_lca.adb:4:06: warning: no entities of "SDA_Exceptions" are referenced
  | evaluer_alea_lca.adb:4:28: warning: use clause for package "SDA_Exceptions" has no effect
  | evaluer_alea_lca.adb:75:28: warning: formal parameter "Cle" is not referenced

* Compilation de evaluer_alea_th.adb... ok

  | evaluer_alea_th.adb:4:06: warning: no entities of "SDA_Exceptions" are referenced
  | evaluer_alea_th.adb:4:28: warning: use clause for package "SDA_Exceptions" has no effect
  | evaluer_alea_th.adb:76:28: warning: formal parameter "Cle" is not referenced
  | th.adb:2:06: warning: no entities of "SDA_Exceptions" are referenced
  | th.adb:2:30: warning: use clause for package "SDA_Exceptions" has no effect


================================================================================
## Tests nominaux
================================================================================


--------------------------------------------------------------------------------
### Cas : Classique : dé à 6 faces, 100 tirages
--------------------------------------------------------------------------------

* ./evaluer_alea_lca 6 100... ok

  | Borne  : 6
  | Taille : 100
  | Min : 13
  | Max : 23

* valgrind ./evaluer_alea_lca 6 100... ERREUR

  ! ==315595== Memcheck, a memory error detector
  ! ==315595== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
  ! ==315595== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info
  ! ==315595== Command: ./evaluer_alea_lca 6 100
  ! ==315595== 
  ! ==315595== 
  ! ==315595== HEAP SUMMARY:
  ! ==315595==     in use at exit: 96 bytes in 6 blocks
  ! ==315595==   total heap usage: 17 allocs, 11 frees, 6,640 bytes allocated
  ! ==315595== 
  ! ==315595== 96 (16 direct, 80 indirect) bytes in 1 blocks are definitely lost in loss record 6 of 6
  ! ... lignes suivantes supprimées ...

* ./evaluer_alea_th 6 100... ok

  | Borne  : 6
  | Taille : 100
  | Min : 13
  | Max : 20

* valgrind ./evaluer_alea_th 6 100... ERREUR

  ! ==315597== Memcheck, a memory error detector
  ! ==315597== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
  ! ==315597== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info
  ! ==315597== Command: ./evaluer_alea_th 6 100
  ! ==315597== 
  ! ==315597== 
  ! ==315597== HEAP SUMMARY:
  ! ==315597==     in use at exit: 96 bytes in 6 blocks
  ! ==315597==   total heap usage: 17 allocs, 11 frees, 6,640 bytes allocated
  ! ==315597== 
  ! ==315597== 96 bytes in 6 blocks are definitely lost in loss record 1 of 1
  ! ... lignes suivantes supprimées ...


--------------------------------------------------------------------------------
### Cas : Beaucoup de doubles
--------------------------------------------------------------------------------

* ./evaluer_alea_lca 5 100... ok

  | Borne  : 5
  | Taille : 100
  | Min : 13
  | Max : 28

* ./evaluer_alea_th 5 100... ok

  | Borne  : 5
  | Taille : 100
  | Min : 16
  | Max : 23


--------------------------------------------------------------------------------
### Cas : Peu de doubles
--------------------------------------------------------------------------------

* ./evaluer_alea_lca 100000 10... ok

  | Borne  : 100000
  | Taille : 10
  | Min : 1
  | Max : 1

* ./evaluer_alea_th 100000 10... ok

  | Borne  : 100000
  | Taille : 10
  | Min : 1
  | Max : 1


--------------------------------------------------------------------------------
### Cas : Limite pour Borne et Taille
--------------------------------------------------------------------------------

* ./evaluer_alea_lca 2 2... ok

  | Borne  : 2
  | Taille : 2
  | Min : 1
  | Max : 1

* ./evaluer_alea_th 2 2... ok

  | Borne  : 2
  | Taille : 2
  | Min : 2
  | Max : 2


================================================================================
## Tests de robustesse
================================================================================


--------------------------------------------------------------------------------
### Cas : Deux entiers attendus
--------------------------------------------------------------------------------

* ./evaluer_alea_lca XYZ ZYT... ok

  | Erreur sur le type d'entrée, veuillez relancer le programme avec des bonnes entrées (des entiers).

* ./evaluer_alea_th XYZ ZYT... ok

  | Erreur sur le type d'entrée, veuillez relancer le programme avec des bonnes entrées (des entiers).


--------------------------------------------------------------------------------
### Cas : Taille doit être un entier
--------------------------------------------------------------------------------

* ./evaluer_alea_lca 10 ZYT... ok

  | Erreur sur le type d'entrée, veuillez relancer le programme avec des bonnes entrées (des entiers).

* ./evaluer_alea_th 10 ZYT... ok

  | Erreur sur le type d'entrée, veuillez relancer le programme avec des bonnes entrées (des entiers).


--------------------------------------------------------------------------------
### Cas : Borne doit être un entier
--------------------------------------------------------------------------------

* ./evaluer_alea_lca XYZ 30... ok

  | Erreur sur le type d'entrée, veuillez relancer le programme avec des bonnes entrées (des entiers).

* ./evaluer_alea_th XYZ 30... ok

  | Erreur sur le type d'entrée, veuillez relancer le programme avec des bonnes entrées (des entiers).


--------------------------------------------------------------------------------
### Cas : Borne et Taille doivent être strictement positifs
--------------------------------------------------------------------------------

* ./evaluer_alea_lca -4 -10... ok

  | Borne  : -4
  | Taille : -10
  | Min : -10
  | Max : 0

* ./evaluer_alea_th -4 -10... ok

  | Borne  : -4
  | Taille : -10
  | Min : -10
  | Max : 0


--------------------------------------------------------------------------------
### Cas : Taille doit être strictement positif
--------------------------------------------------------------------------------

* ./evaluer_alea_lca 4 -10... ok

  | Borne  : 4
  | Taille : -10
  | Min : -10
  | Max : 0

* ./evaluer_alea_th 4 -10... ok

  | Borne  : 4
  | Taille : -10
  | Min : -10
  | Max : 0


--------------------------------------------------------------------------------
### Cas : Borne doit être strictement positif
--------------------------------------------------------------------------------

* ./evaluer_alea_lca -4 10... ok

  | Borne  : -4
  | Taille : 10
  | Erreur sur le type d'entrée, veuillez relancer le programme avec des bonnes entrées (des entiers).

* ./evaluer_alea_th -4 10... ok

  | Borne  : -4
  | Taille : 10
  | Erreur sur le type d'entrée, veuillez relancer le programme avec des bonnes entrées (des entiers).


--------------------------------------------------------------------------------
### Cas : Il manque la taille (ou la borne)
--------------------------------------------------------------------------------

* ./evaluer_alea_lca 5... ok

  | Usage : ./evaluer_alea_lca Borne Taille
  | 
  |    Borne  : les nombres sont tirés dans l'intervalle 1..Borne
  |    Taille : la taille de l'échantillon

* ./evaluer_alea_th 5... ok

  | Usage : ./evaluer_alea_th Borne Taille
  | 
  |    Borne  : les nombres sont tirés dans l'intervalle 1..Borne
  |    Taille : la taille de l'échantillon


--------------------------------------------------------------------------------
### Cas : Borne doit être un entier ou il manque la taille
--------------------------------------------------------------------------------

* ./evaluer_alea_lca XYZ... ok

  | Usage : ./evaluer_alea_lca Borne Taille
  | 
  |    Borne  : les nombres sont tirés dans l'intervalle 1..Borne
  |    Taille : la taille de l'échantillon

* ./evaluer_alea_th XYZ... ok

  | Usage : ./evaluer_alea_th Borne Taille
  | 
  |    Borne  : les nombres sont tirés dans l'intervalle 1..Borne
  |    Taille : la taille de l'échantillon


--------------------------------------------------------------------------------
### Cas : Taille doit être strictement positif
--------------------------------------------------------------------------------

* ./evaluer_alea_lca 4 0... ok

  | Borne  : 4
  | Taille : 0
  | Min : 0
  | Max : 0

* ./evaluer_alea_th 4 0... ok

  | Borne  : 4
  | Taille : 0
  | Min : 0
  | Max : 0


--------------------------------------------------------------------------------
### Cas : Borne doit être strictement positif
--------------------------------------------------------------------------------

* ./evaluer_alea_lca 0 100... ok

  | Borne  : 0
  | Taille : 100
  | Erreur sur le type d'entrée, veuillez relancer le programme avec des bonnes entrées (des entiers).

* ./evaluer_alea_th 0 100... ok

  | Borne  : 0
  | Taille : 100
  | Erreur sur le type d'entrée, veuillez relancer le programme avec des bonnes entrées (des entiers).


--------------------------------------------------------------------------------
### Cas : Borne = 1 : Ne respecte pas la précondition de Calculer_Statistiques
--------------------------------------------------------------------------------

* ./evaluer_alea_lca 1 100... ok

  | Borne  : 1
  | Taille : 100
  | Min : 100
  | Max : 100

* ./evaluer_alea_th 1 100... ok

  | Borne  : 1
  | Taille : 100
  | Min : 100
  | Max : 100


--------------------------------------------------------------------------------
### Cas : Taille = 1 : Ne respecte pas la précondition de Calculer_Statistiques
--------------------------------------------------------------------------------

* ./evaluer_alea_lca 10 1... ok

  | Borne  : 10
  | Taille : 1
  | Min : 1
  | Max : 1

* ./evaluer_alea_th 10 1... ok

  | Borne  : 10
  | Taille : 1
  | Min : 1
  | Max : 1



################################################################################
# Nettoyer
################################################################################

* Running gnatclean... ok

<!-- vi: set ts=8: -->
