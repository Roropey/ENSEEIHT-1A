File allumettes/Arbitre.java: 461 tokens, 85 lines
File allumettes/JeuReel.java: 135 tokens, 33 lines
File allumettes/CoupInvalideException.java: 68 tokens, 39 lines
File allumettes/Joueur.java: 122 tokens, 36 lines
File allumettes/OperationInterditeException.java: 21 tokens, 8 lines
File allumettes/StrategieHumain.java: 167 tokens, 40 lines
File allumettes/StrategieRapide.java: 42 tokens, 12 lines
File allumettes/JeuProcuration.java: 65 tokens, 20 lines
File allumettes/ConfigurationException.java: 21 tokens, 16 lines
File allumettes/Jouer.java: 444 tokens, 109 lines
File allumettes/Jeu.java: 23 tokens, 21 lines
File allumettes/StrategieExpert.java: 129 tokens, 28 lines
File allumettes/StrategieNaif.java: 57 tokens, 15 lines
File allumettes/Strategie.java: 19 tokens, 8 lines
File allumettes/StrategieTricheur.java: 111 tokens, 25 lines (not NL-terminated)
Total input: 15 files (15 new, 0 old), 1885 tokens

allumettes/Arbitre.java: line 17-21 [38]
allumettes/Arbitre.java: line 23-27
< 				faireJouer(jeu, new JeuProcuration(jeu), this.j1);
< 				if (jeu.getNombreAllumettes() == 0) {
< 					afficherFin(this.j1,this.j2);
< 					break;
< 				}
---
> 				faireJouer(jeu, new JeuProcuration(jeu), this.j2);
> 				if (jeu.getNombreAllumettes() == 0) {
> 					afficherFin(this.j2,this.j1);
> 					break;
> 				}

allumettes/Arbitre.java: line 70-74 [34]
allumettes/Arbitre.java: line 76-80
< 			faireJouer(jeu, jeu, this.j1);
< 			if (jeu.getNombreAllumettes() == 0) {
< 				afficherFin(this.j1,this.j2);
< 				break;
< 			}
---
> 			faireJouer(jeu, jeu, this.j2);
> 			if (jeu.getNombreAllumettes() == 0) {
> 				afficherFin(this.j2,this.j1);
> 				break;
> 			}

allumettes/Arbitre.java: line 1-11 [33]
allumettes/Joueur.java: line 1-12
< package allumettes;
< 
< public class Arbitre {
< 	
< 	private Joueur j1;
< 	private Joueur j2;
< 	
< 	public Arbitre(Joueur j1, Joueur j2) {
< 		this.j1 = j1;
< 		this.j2 = j2;
< 	}
---
> package allumettes;
> import java.util.Random;
> 
> public class Joueur {
> 	
> 	private String nom;
> 	private Strategie strategie;
> 	
> 	public Joueur(String nom, Strategie strategie) {
> 		this.nom = nom;
> 		this.strategie = strategie;
> 	}

allumettes/StrategieHumain.java: line 22-25 [32]
allumettes/StrategieTricheur.java: line 14-18
< 						System.out.println("[Une allumette en moins, plus que "+jeu.getNombreAllumettes()+". Chut !]");
< 					} catch (CoupInvalideException e) {
< 						System.out.println("[Pas assez d'allumettes pour tricher.]");
< 					}
---
> 			System.out.println("[Allumettes restantes : "
> 						+ jeu.getNombreAllumettes() + "]");
> 		} catch (CoupInvalideException e) {
> 			System.out.println("[Plus assez d'allumettes pour tricher]");
> 		}

allumettes/Arbitre.java: line 23-29 [30]
allumettes/Arbitre.java: line 76-83
< 				faireJouer(jeu, new JeuProcuration(jeu), this.j2);
< 				if (jeu.getNombreAllumettes() == 0) {
< 					afficherFin(this.j2,this.j1);
< 					break;
< 				}
< 				
< 			} catch (OperationInterditeException e) {
---
> 			faireJouer(jeu, jeu, this.j2);
> 			if (jeu.getNombreAllumettes() == 0) {
> 				afficherFin(this.j2,this.j1);
> 				break;
> 			}
> 				
> 						
> 		} while (true);

allumettes/Arbitre.java: line 46-48 [26]
allumettes/StrategieHumain.java: line 22-24
< 				throw new OperationInterditeException("Abandon de la partie car "+j.getNom()+" triche !");
< 			} catch (CoupInvalideException e) {
< 				System.out.println("Impossible ! Nombre invalide : "+e.getCoup()+" ("+e.getProbleme()+")");
---
> 						System.out.println("[Une allumette en moins, plus que "+jeu.getNombreAllumettes()+". Chut !]");
> 					} catch (CoupInvalideException e) {
> 						System.out.println("[Pas assez d'allumettes pour tricher.]");

