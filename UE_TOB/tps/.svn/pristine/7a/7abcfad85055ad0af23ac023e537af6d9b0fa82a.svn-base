Date de l'évaluation : mar. 15 mars 2022 18:14:34 CET

Nombre de similitudes (voir evaluations/penalites1/sim_java.txt) : 6
Les similitudes indiquent généralement du code à restructurer.

Erreurs checkstyle (différentes/types) : 26/10	(voir evaluations/penalites1//checkstyle.log)

Classe OperationInterditeException : OperationInterditeException (ok)

Procuration sur le jeu réel : allumettes/JeuProcuration.java (ok)

OperationInterditeException : Pourquoi la lever à plusieurs endroits ?
  | allumettes/Arbitre.java:45:             throw new OperationInterditeException("Abandon de la partie car "+j.getNom()+" triche !");
  | allumettes/StrategieHumain.java:26:                     throw new OperationInterditeException(e.getMessage());
  | allumettes/JeuProcuration.java:16:      throw new OperationInterditeException("Le joueur triche !");
  | allumettes/StrategieTricheur.java:14:                   throw new OperationInterditeException(e.getMessage());

OperationInterditeException : Pourquoi la récupérer dans plusieurs classes ?
  | allumettes/Arbitre.java:28:         } catch (OperationInterditeException e) {
  | allumettes/Arbitre.java:44:         } catch (OperationInterditeException e) {
  | allumettes/StrategieHumain.java:25:                 } catch (OperationInterditeException e) {
  | allumettes/StrategieTricheur.java:13:               } catch (OperationInterditeException e) {


Throwable, Exception et RuntimeException ne devraient pas être récupérées car trop générales... ok

AssertionError ne doit pas être récupérée... ok

Autres exceptions récupérées :
  | allumettes/Arbitre.java:46:         } catch (CoupInvalideException e) {
  | allumettes/StrategieHumain.java:23:                 } catch (CoupInvalideException e) {
  | allumettes/StrategieHumain.java:32:         } catch (NumberFormatException e) {
  | allumettes/Jouer.java:21:       } catch (ConfigurationException e) {
  | allumettes/StrategieTricheur.java:20:       } catch (CoupInvalideException e) {

Utilisation de 'Scanner' : ok
  | allumettes/StrategieHumain.java:6:  private static Scanner humain = new Scanner(System.in);

Utilisation de 'split' : ok
  | allumettes/Jouer.java:63:       String[] argumentsSepare = arguments.split("@");

Utilisation de 'Random' : ok
  | allumettes/Joueur.java:2:import java.util.Random;
  | allumettes/StrategieNaif.java:3:import java.util.Random;
  | allumettes/StrategieNaif.java:8:        final Random nombre = new Random();

Utilisation de '3' : Ne pas utiliser de constante littérale hors -1, 0 ou 1 (peut-être PRISE_MAX ?)
  |     allumettes/StrategieExpert.java:12:     case Jeu.PRISE_MAX*3+1 :

Affichage de 'Impossible !' : ok

Utilisation de 'System.exit' : ok

Compilation de Jouer.java : OK.
Compilation de Arbitre.java : OK.
Test exemplePresqueSujet : ok
Test exempleTricheurSujet : ok
Test exempleConfiantTricheurSujet : ok
Test exempleRobustesse : ok
Test exempleHumainTricheurExpert : ok
Test exempleMaxLou : ok
Test exempleRapideRapide : ok
Test exempleTricheurExpert : ok

Test RobustesseTest : Tests run: 25,  Failures: 5	(voir evaluations/penalites1/RobustesseTest.log)
    1) testerSansStrategieConfiant(RobustesseTest)
        ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1
    2) testerSansStrategie(RobustesseTest)
        ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1
    3) testerSansStrategieSymetrie(RobustesseTest)
        ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1
    4) testerDoubleConfiantConfiant(RobustesseTest)
        ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1
    5) testerSansStrategieSymetrieConfiant(RobustesseTest)
        ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1


On recommence avec les classes/interfaces fournies : Jeu ConfigurationException CoupInvalideException
Compilation de Jouer.java : OK.
Compilation de Arbitre.java : OK.

Vérification du respect du diagramme de classe...
Test FormeTest : OK (2 tests)	(voir evaluations/penalites1/FormeTest.log)

Aucune classe de test (fichier *Test.java ou Test*.java) !	(pénalité : 1)

Total pénalités : 1
