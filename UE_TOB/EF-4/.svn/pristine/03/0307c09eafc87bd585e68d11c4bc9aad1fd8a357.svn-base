package Environement;

import Utile.*;
import Ressources.*;
import static java.lang.Math.*;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class Environnement {


    protected int taille_x;
    protected int taille_y;
    protected String nom;
    private int tauxHumidite; 
    private List<PointEau> listPE;
    private int fertilite;
    /*exemple de composition : 
     - H = 0 désert
     - H = 25 prairie
     - H = 50 forêt
     - H = 75 marécage
     - H = 100 mer
    */

    public Environnement(int x, int y, String nom, int hum, int fertilite){
        if ((x<=0) | (y<=0) | (hum<0) | (hum>100) | (fertilite <0) | (fertilite > 100)){
            throw new ValeurInterditeException("Valeurs d'entrée non valide.\nDoit avoir x >= 0, y >= 0 et 0 <= Humidité <= 100.\n");
        } else {
            this.taille_x = x;
            this.taille_y = y;
            this.nom = nom;
            this.tauxHumidite = hum;
            this.fertilite = fertilite;
            this.listPE = new ArrayList<PointEau>();



            
        }
    }

    // Methodes Generales
    public int[] getDimensions(){
        int[] dimensions = {this.taille_x,this.taille_y};
        return dimensions;
    }

    public String getNom(){
        return this.nom;
    }

    public int[] getCaracteristique(){
        int[] carac = {this.tauxHumidite,this.fertilite};
        return carac;
    }

    public List<PointEau> getPointEau(){
        return this.listPE;
    }
    public void addPointEau(PointEau pe){
        this.listPE.add(pe);
    }
    public Ressource apparaitre(){
        
        double alea_H = ((new Random()).nextInt(50)-25) + (this.tauxHumidite);
        if (alea_H < 12.5){
            int type = -1;
            Cactus cactus;
            do{
                cactus = new Cactus(0,this.taille_x,0,this.taille_y);
                type = this.getType(cactus.getPosition());
            }while(type != 0);;

            return cactus;
            //apparition élément propre  désert, par exemple cactus 
        } else if (alea_H <= 87.5){

            return new Nenuphar(0,this.taille_x,0,this.taille_y);
            //apparition élément propre aux marécage, par exemple sable nénuphare
        } else {
            int type = 0;
            Algue algue;
            do{
                algue = new Algue(0,this.taille_x,0,this.taille_y);
                type = this.getType(algue.getPosition());
            }while(type != -1);;
            return algue;
            //apparition élément propre à la mer, par exemple algue (uniquement mangeable par poisson)
        }
    }

    public int getType(Position deplacement) {

        for(PointEau pe: listPE){
            boolean[][] tab = pe.getTab();
            for (int i = 0; i<tab.length;i++){
                for(int j = 0;j<tab[0].length;j++){
                        
                    if (i + pe.getX() == deplacement.getX() && j + pe.getY() == deplacement.getY()){
                        return tab[i][j] ? -1 :0;
                        
                        
                    }

                }
                
            }
        }
        return 0;
    }

}
