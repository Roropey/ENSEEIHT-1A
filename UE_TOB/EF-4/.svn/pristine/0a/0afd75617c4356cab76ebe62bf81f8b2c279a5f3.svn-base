package Tests;

import Ressources.Ressource;
import Utile.*;

public class TestRessource {

    public static void testerPosition(Ressource ressourceTestConnu, Ressource ressourceTestAleatoire){
        Position positionConnue = ressourceTestConnu.getPosition();
        Position positionAleatoire = ressourceTestAleatoire.getPosition();
        assert positionConnue.getX()==5;
        assert positionConnue.getY()==6.6;
        assert (positionAleatoire.getX()>=10.5)&(positionAleatoire.getX()<=50);
        assert (positionAleatoire.getY()>=20)&(positionAleatoire.getY()<=30);
    }

    public static void testerNutrition(Ressource ressourceTestConnu, Ressource ressourceTestAleatoire){
        assert ressourceTestConnu.getValeurNutritive()==10;
        assert ressourceTestAleatoire.getValeurNutritive()==5;
    }

    public static void testerNom(Ressource ressourceTestConnu, Ressource ressourceTestAleatoire){
        assert ressourceTestConnu.getNom().equals("test connu");
        assert ressourceTestAleatoire.getNom().equals("test aléatoire");
    }

    public static void testerCategorie(Ressource ressourceTestConnu, Ressource ressourceTestAleatoire){
        assert ressourceTestConnu.getCategorie()==Categorie.plante;
        assert ressourceTestAleatoire.getCategorie()==Categorie.fruit;
    }

    public static void testerExisteMangee(Ressource ressourceTestConnu){
        assert ressourceTestConnu.getExiste();
        assert ressourceTestConnu.estMangee();
        assert !(ressourceTestConnu.getExiste());
        assert !(ressourceTestConnu.estMangee());
    }

    public static void testerExisteMeurt(Ressource ressourceTestAleatoire){
        assert ressourceTestAleatoire.getExiste();
        ressourceTestAleatoire.meurt();
        assert !(ressourceTestAleatoire.getExiste());
    }

    public static void testRobustesseX(){
        try {
            Ressource impossibleX = new Ressource(-1,6.6,"Problème X", 10, Categorie.plante);
            System.out.print("Ressource à dimension négative créé !\n");
            assert (false);
        } catch(ValeurInterditeException e) {
            ;;
        }        
    }

    public static void testRobustesseY(){
        try {
            Ressource impossibleY = new Ressource(1,-6.6,"Problème Y", 10, Categorie.plante);
            System.out.print("Ressource à dimension négative créé !\n");
            assert (false);
        } catch(ValeurInterditeException e) {
            ;;
        }        
    }

    public static void testRobustesseMinX(){
        try {
            Ressource impossibleMinX = new Ressource(-5,50,20,30,"Problème min X", 5, Categorie.fruit);
            System.out.print("Ressource à potentiel dimension négative créé !\n");
            assert (false);
        } catch(ValeurInterditeException e) {
            ;;
        }        
    }

    public static void testRobustesseMinY(){
        try {
            Ressource impossibleMinY = new Ressource(-5,50,20,30,"Problème min Y", 5, Categorie.fruit);
            System.out.print("Ressource à potentiel dimension négative créé !\n");
            assert (false);
        } catch(ValeurInterditeException e) {
            ;;
        }        
    }

    public static void testRobustesseMinMaxX(){
        try {
            Ressource impossibleMinMaxX = new Ressource(5,1,20,30,"Problème min>max X", 5, Categorie.fruit);
            System.out.print("Ressource à potentiel dimension négative créé !\n");
            assert (false);
        } catch(ValeurInterditeException e) {
            ;;
        }        
    }

    public static void testRobustesseMinMaxY(){
        try {
            Ressource impossibleMinMaxY = new Ressource(5,50,20,3,"Problème min>max Y", 5, Categorie.fruit);
            System.out.print("Ressource à potentiel dimension négative créé !\n");
            assert (false);
        } catch(ValeurInterditeException e) {
            ;;
        }        
    }

    public static void main (String[] args){
         
        System.out.print("Création ressources de test\n");
        Ressource ressourceTestConnu = new Ressource(5,6.6,"test connu", 10, Categorie.plante);
        Ressource ressourceTestAleatoire = new Ressource(10.5,50,20,30,"test aléatoire", 5, Categorie.fruit);
        System.out.print("Vérification des positions\n");
        testerPosition(ressourceTestConnu, ressourceTestAleatoire);
        System.out.print("Vérification des valeurs nutritionnaires\n");
        testerNutrition(ressourceTestConnu, ressourceTestAleatoire);
        System.out.print("Vérification des noms\n");
        testerNom(ressourceTestConnu, ressourceTestAleatoire);
        System.out.print("Vérification des catégories\n");
        testerCategorie(ressourceTestConnu, ressourceTestAleatoire);
        System.out.print("Vérification d'existe et de la fonction estMangee()\n");
        testerExisteMangee(ressourceTestConnu);
        System.out.print("Vérification d'existe et de la fonction meurt()\n");
        testerExisteMeurt(ressourceTestAleatoire);
        System.out.print("Tests de robustesse de X et Y\n");
        testRobustesseX();
        testRobustesseY();
        System.out.print("Tests de robustesse des intervalles X et Y\n");
        testRobustesseMinX();
        testRobustesseMinY();
        testRobustesseMinMaxX();
        testRobustesseMinMaxY();
        System.out.print("Tous les tests ont réussis\n");
    }

}