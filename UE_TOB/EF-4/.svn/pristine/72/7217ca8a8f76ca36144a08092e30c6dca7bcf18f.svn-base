package Affichage;

import javax.swing.*;
import javax.swing.border.Border;

import java.awt.*;

import Espece.Espece;
import Espece.Individu;
import Espece.Loup;
import Espece.Aigle;
import Espece.Dauphin;
import Espece.Mouton;
import Espece.Sardine;
import Ressources.Ressource;
import Simulation.Simulation;
import Utile.ValeurInterditeException;

import java.awt.event.*;
import java.util.*;
import java.util.concurrent.TimeUnit;

public class Evolution{
    boolean fini;
    private static final Map<Integer, ImageIcon> images
        = new HashMap<Integer, ImageIcon>();
    static {
        images.put(0,new ImageIcon(new ImageIcon("Affichage/despeedspeed.png").getImage().getScaledInstance(50, 50, Image.SCALE_DEFAULT)));
        images.put(1,new ImageIcon(new ImageIcon("Affichage/despeed.png").getImage().getScaledInstance(50, 50, Image.SCALE_DEFAULT)));
        images.put(2,new ImageIcon(new ImageIcon("Affichage/play.png").getImage().getScaledInstance(50, 50, Image.SCALE_DEFAULT)));
        images.put(3,new ImageIcon(new ImageIcon("Affichage/speed.png").getImage().getScaledInstance(50, 50, Image.SCALE_DEFAULT)));
        images.put(4,new ImageIcon(new ImageIcon("Affichage/speedspeed.png").getImage().getScaledInstance(50, 50, Image.SCALE_DEFAULT)));
        images.put(5,new ImageIcon(new ImageIcon("Affichage/despeedspeedbleu.png").getImage().getScaledInstance(50, 50, Image.SCALE_DEFAULT)));
        images.put(6,new ImageIcon(new ImageIcon("Affichage/despeedbleu.png").getImage().getScaledInstance(50, 50, Image.SCALE_DEFAULT)));
        images.put(7,new ImageIcon(new ImageIcon("Affichage/playbleu.png").getImage().getScaledInstance(50, 50, Image.SCALE_DEFAULT)));
        images.put(8,new ImageIcon(new ImageIcon("Affichage/speedbleu.png").getImage().getScaledInstance(50, 50, Image.SCALE_DEFAULT)));
        images.put(9,new ImageIcon(new ImageIcon("Affichage/speedspeedbleu.png").getImage().getScaledInstance(50, 50, Image.SCALE_DEFAULT)));
    }

    public JLabel[] barButtons = new JLabel[5];
    public JPanel panelSimu = new JPanel();
    public MapObervable mapEspeces;
    JPanel[] listeEspeceParametre;
    JLabel[] nomEspece;
    JPanel listeIntermediare;
    JPanel listeEspeceJPanel;
    public JPanel evolution;
    public Border Line = BorderFactory.createLineBorder(Color.black,2);
    Simulation simu;
    public Evolution(MapObervable mapEspeces, Simulation simu){
        this.mapEspeces = mapEspeces;
        this.listeEspeceParametre = new JPanel[mapEspeces.size()];
        this.nomEspece = new JLabel[mapEspeces.size()];
        this.simu = simu;
        fini= false;
		panelSimu.setLayout(new GridLayout(1,2));
        
        JPanel evolutiontemps = new JPanel();
        
        evolutiontemps.setLayout(new BorderLayout());
            EvolutionMap evolutionMap = new EvolutionMap(simu.getEnvironnement());
    
           
            evolution = new JPanel(null);
            
            
            evolution.add(evolutionMap);
            evolutionMap.setBounds(0, 0, simu.getEnvironnement().getDimensions()[0],simu.getEnvironnement().getDimensions()[1]);
            evolution.setPreferredSize(new Dimension(simu.getEnvironnement().getDimensions()[0],simu.getEnvironnement().getDimensions()[1]));
            mapEspeces.addObserver(new vueIndividu(evolution));
            evolutiontemps.add(evolution,BorderLayout.CENTER);
             
            JPanel temps = new JPanel();
            evolutiontemps.add(temps,BorderLayout.SOUTH);
            temps.setBackground(Color.LIGHT_GRAY);
            temps.setPreferredSize(new Dimension(300,60));

            
            for(int i = 0; i < barButtons.length; i++){
                barButtons[i] = new JLabel();
                barButtons[i].setIcon(images.get(i));
                barButtons[i].addMouseListener(new Clicklistener(i));
                temps.add(barButtons[i]);
                
            }
            panelSimu.add(evolutiontemps);

        JPanel parametre = new JPanel();
        parametre.setBackground(Color.GRAY);
        JLabel TitreParametre = new JLabel("Parametres");
        parametre.setLayout(new BorderLayout());
        parametre.add(TitreParametre,BorderLayout.NORTH);
            JPanel listeParametre = new JPanel();
            listeParametre.setLayout(new GridLayout(1,2));
            listeEspeceJPanel = new JPanel();
            listeEspeceJPanel.setLayout(new GridLayout(mapEspeces.size(),1));
            mapEspeces.addObserver(new VueEspece(listeEspeceJPanel));
            listeIntermediare = new JPanel();
            listeIntermediare.setLayout(new GridLayout(mapEspeces.size(),1));
            mapEspeces.addObserver(new vueParametres(listeIntermediare));

            listeParametre.add(listeEspeceJPanel);
            listeParametre.add(listeIntermediare);
        parametre.add(listeParametre);  

        panelSimu.add(parametre);
    }
    public class vueIndividu implements Observer {
        private JPanel EvolutionJpanel;
        public vueIndividu(JPanel EvolutionJpanel){
            this.EvolutionJpanel = EvolutionJpanel;
        }
        @Override
        public void update(Observable arg0, Object arg1) {
            // TODO Auto-generated method stub
            EvolutionJpanel.removeAll();


            if( simu.getIndividus().size() != 0){   
                for (Individu iTest : simu.getIndividus()){
                    String nom = iTest.getEspece().getNom();
                    JCanvas IndividuSwing = new JCanvas(nom);
                    
                    EvolutionJpanel.add(IndividuSwing);
                    IndividuSwing.setBounds((int) iTest.getPosition().getX(),(int) iTest.getPosition().getY(),5,5);

                }
            }
            if (simu.getRessources().size() != 0) {
                for (Ressource ressource : simu.getRessources()){
                    try {
                        JCanvas resSwing = new JCanvas(ressource.getNom());
                        EvolutionJpanel.add(resSwing);
                        resSwing.setBounds((int) ressource.getPosition().getX(),(int) ressource.getPosition().getY(),5,5);               
                    } catch (ValeurInterditeException e) {
                        
                    }

                    
                }
            }
            EvolutionMap evolutionMap = new EvolutionMap(simu.getEnvironnement());
            evolution.add(evolutionMap);
            evolutionMap.setBounds(0, 0, simu.getEnvironnement().getDimensions()[0],simu.getEnvironnement().getDimensions()[1]);


            
        }    
    }

    public class vueParametres implements Observer {
        private JPanel EspeceJpanel;
        public vueParametres(JPanel EspeceJpanel){
            this.EspeceJpanel = EspeceJpanel;
        }
        @Override
        public void update(Observable arg0, Object arg1) {
            EspeceJpanel.removeAll();
            
            if(simu.getIndividus().size() != 0){   
                String mapstring = arg1.toString().substring(1,arg1.toString().length()-1);
                String[] liste = mapstring.split(",");
                
                
                for (String especenbre : liste){
                    String nom = especenbre.split("=")[0].replaceAll("\\s+", "");
                    Espece espece = findEspece(nom);

                    EspeceJpanel.add(new JLabel("Duree de vie :" + espece.getDureeDeVie()));
                    EspeceJpanel.add(new JLabel("Taux de reproduction :" + espece.getTauxReproduction(espece.getMajorite()+1)));
                    EspeceJpanel.add(new JLabel("Esperance de vie : " +espece.getDureeDeVie()));
                    EspeceJpanel.add(new JLabel("Marin : " + (espece.getEstMarin()? "Oui ": "Non") ));
                    EspeceJpanel.add(new JLabel("Volant : " + (espece.getEstVolant()? "Oui ": "Non") ));
                }
                
                EspeceJpanel.setVisible(false);
                EspeceJpanel.setVisible(true);
            }
        }
        private Espece findEspece(String str){
            switch (str){
                case "Sardine" : 
                    return new Sardine();
                case "Aigle" : 
                    return new Aigle();
                case "Dauphin" : 
                    return new Dauphin();
                case "Mouton" : 
                    return new Mouton();
                case "Loup" : 
                default : return new Loup();
            }
        };
    }
    private int interations = 1;
    private class Clicklistener implements MouseListener
    {
        private int i;
        
        public Clicklistener(int i){
           this.i=i;
        }
        @Override
        public void mouseClicked(MouseEvent e) {
            barButtons[i].setIcon(images.get(i+5));
            for (int j = 0; j < 5; j++){
                if (j != i) {
                    barButtons[j].setIcon(images.get(j));
                }
            }
            
            
        }
        @Override
        public void mouseEntered(MouseEvent e) {
            // TODO Auto-generated method stub
            simu.iterer();
            Map<Espece,Integer> especeNbre = new HashMap<>();
            for (Individu iTest : simu.getIndividus()){
                if ( especeNbre.get(iTest.getEspece()) != null){
                    especeNbre.put(iTest.getEspece(), especeNbre.get(iTest.getEspece())+1);
                }else{
                    especeNbre.put(iTest.getEspece(), 1);
                }
                
            }
           System.out.println( especeNbre.size());

            for (Espece esp : especeNbre.keySet()){
                mapEspeces.put(esp.getNom(), especeNbre.get(esp));
            }
            if(especeNbre.size() == 0 && !fini){
                mapEspeces.reload();
                mapEspeces.clear();
                fini = true;
            }
            
            
            panelSimu.setVisible(false);
            panelSimu.setVisible(true);
            interations++;
        }
        @Override
        public void mouseExited(MouseEvent e) {
            // TODO Auto-generated method stub
            
        }
        @Override
        public void mousePressed(MouseEvent e) {

            
        }
        @Override
        public void mouseReleased(MouseEvent e) {
        


            
        
            
        }
    }
    private class ClickEspece implements MouseListener {
        private int i;
        public ClickEspece(int i){
            this.i = i;
        }
        @Override
        public void mouseClicked(MouseEvent e) {
            listeEspeceParametre[i].setVisible(true);
            nomEspece[i].setForeground(Color.GRAY);
            for (int j = 0; j < mapEspeces.size(); j++){
                if (j != i){
                    listeEspeceParametre[j].setVisible(false);
                    nomEspece[j].setForeground(Color.BLACK);
                }
            }
            
        }

        @Override
        public void mouseEntered(MouseEvent e) {
            // TODO Auto-generated method stub
            
        }

        @Override
        public void mouseExited(MouseEvent e) {
            // TODO Auto-generated method stub
            
        }

        @Override
        public void mousePressed(MouseEvent e) {
            // TODO Auto-generated method stub
            
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            // TODO Auto-generated method stub
            
        }

    }
}
