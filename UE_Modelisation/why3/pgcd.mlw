
(* PGCD : Algorithme Euclide *)

theory PGCD

  use int.Int

  function pgcd(a b : int) : int


  axiom pgcd_egal : forall a : int.  (pgcd a a) = a
  
  axiom pgcd_sym : forall a,b : int.  (pgcd a b)=(pgcd b a)

  axiom pgcd_minus : forall a,b : int. b>=a -> (pgcd a b)= (pgcd a (b-a))


end

module PGCDEuclide

  use import int.Int
  use import ref.Refint
  use import PGCD

  let pgcd_euclide (a b: int) : int
    requires { 0 < a && 0 < b }
    ensures  { result = (pgcd a b)}
  =
    let ap = ref a in
    let bp = ref b in
    while (!ap <> !bp) do
      invariant { ((!ap >= 0) && (!bp >= 0) && (!ap <= a) && (!bp <= b) && ((pgcd a b) = (pgcd !ap !bp))) }
      variant   { !ap + !bp }  (*revoir variant avec max qui est à définir*)
      if (!ap <= !bp) then
      	 bp := !bp - !ap
      else
      	 ap := !ap - !bp
    done;
    !ap

end
